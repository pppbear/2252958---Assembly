
print:     file format pe-x86-64

Contents of section .text:
 0000 554889e5 4883ec30 e8000000 00c645ff  UH..H..0......E.
 0010 61eb250f be45ff89 c1e80000 0000807d  a.%..E.........}
 0020 ff6d750a b90a0000 00e80000 00000fb6  .mu.............
 0030 45ff83c0 018845ff 807dff7a 7ed5b800  E.....E..}.z~...
 0040 00000048 83c4305d c3909090 90909090  ...H..0]........
Contents of section .xdata:
 0000 01080305 08520403 01500000           .....R...P..    
Contents of section .pdata:
 0000 00000000 49000000 00000000           ....I.......    
Contents of section .debug_info:
 0000 49010000 04000000 00000801 474e5520  I...........GNU 
 0010 43313720 382e312e 30202d6d 74756e65  C17 8.1.0 -mtune
 0020 3d636f72 6532202d 6d617263 683d6e6f  =core2 -march=no
 0030 636f6e61 202d6700 0c707269 6e742e63  cona -g..print.c
 0040 00443a5c 444f5342 6f785cbb e3b1e0ce  .D:\DOSBox\.....
 0050 c4b5b55c 41534349 49b1edb4 f2d3a1ca  ...\ASCII.......
 0060 b5d1e900 00000000 00000000 49000000  ............I...
 0070 00000000 00000000 02010663 68617200  ...........char.
 0080 0208076c 6f6e6720 6c6f6e67 20756e73  ...long long uns
 0090 69676e65 6420696e 74000208 056c6f6e  igned int....lon
 00a0 67206c6f 6e672069 6e740002 02077368  g long int....sh
 00b0 6f727420 756e7369 676e6564 20696e74  ort unsigned int
 00c0 00020405 696e7400 0204056c 6f6e6720  ....int....long 
 00d0 696e7400 02040775 6e736967 6e656420  int....unsigned 
 00e0 696e7400 0204076c 6f6e6720 756e7369  int....long unsi
 00f0 676e6564 20696e74 00020108 756e7369  gned int....unsi
 0100 676e6564 20636861 7200036d 61696e00  gned char..main.
 0110 010305c1 00000000 00000000 00000049  ...............I
 0120 00000000 00000001 9c040d00 00000000  ................
 0130 00003100 00000000 00000574 79706500  ..1........type.
 0140 01040c78 00000002 916f0000 00        ...x.....o...   
Contents of section .debug_abbrev:
 0000 01110125 08130b03 081b0811 01120710  ...%............
 0010 17000002 24000b0b 3e0b0308 0000032e  ....$...>.......
 0020 013f1903 083a0b3b 0b390b49 13110112  .?...:.;.9.I....
 0030 07401896 42190000 040b0111 01120700  .@..B...........
 0040 00053400 03083a0b 3b0b390b 49130218  ..4...:.;.9.I...
 0050 000000                               ...             
Contents of section .debug_aranges:
 0000 2c000000 02000000 00000800 00000000  ,...............
 0010 00000000 00000000 49000000 00000000  ........I.......
 0020 00000000 00000000 00000000 00000000  ................
Contents of section .debug_line:
 0000 59000000 02001e00 00000101 fb0e0d00  Y...............
 0010 01010101 00000001 00000100 7072696e  ............prin
 0020 742e6300 00000000 050c0009 02000000  t.c.............
 0030 00000000 00148259 05024a05 03300506  .......Y..J..0..
 0040 ad050467 05290002 04029a05 02000204  ...g.)..........
 0050 019e0509 6c050159 02060001 01        ....l..Y.....   
Contents of section .rdata$zzz:
 0000 4743433a 20287838 365f3634 2d706f73  GCC: (x86_64-pos
 0010 69782d73 6a6c6a2d 72657630 2c204275  ix-sjlj-rev0, Bu
 0020 696c7420 6279204d 696e4757 2d573634  ilt by MinGW-W64
 0030 2070726f 6a656374 2920382e 312e3000   project) 8.1.0.
Contents of section .debug_frame:
 0000 14000000 ffffffff 01000178 200c0708  ...........x ...
 0010 a0010000 00000000 24000000 00000000  ........$.......
 0020 00000000 00000000 49000000 00000000  ........I.......
 0030 410e1086 02430d06 0244c60c 07080000  A....C...D......

Disassembly of section .text:

0000000000000000 <main>:
   0:	55                   	push   %rbp              ; 将基址指针压入栈中
   1:	48 89 e5             	mov    %rsp,%rbp         ; 将栈指针复制到基址指针中
   4:	48 83 ec 30          	sub    $0x30,%rsp        ; 从 rsp 寄存器中减去48个字节
   8:	e8 00 00 00 00       	callq  d <main+0xd>      ; 调用函数
   d:	c6 45 ff 61          	movb   $0x61,-0x1(%rbp)  ; 将0x61值('a')存到 rbp 中的一个字节
  11:	eb 25                	jmp    38 <main+0x38>    ; 跳转到 main +0x38的地址
  13:	0f be 45 ff          	movsbl -0x1(%rbp),%eax   ; 将 rbp 寄存器中读取一个字节符号扩展到 eax 寄存器(32bit)中
  17:	89 c1                	mov    %eax,%ecx         ; 将 eax 寄存器中的值复制到 ecx 中
  19:	e8 00 00 00 00       	callq  1e <main+0x1e>    ; 调用函数
  1e:	80 7d ff 6d          	cmpb   $0x6d,-0x1(%rbp)  ; 比较 'a' 和 rbp 寄存器的第一个字节
  22:	75 0a                	jne    2e <main+0x2e>    ; 不等于时跳转到(main+0x2e)
  24:	b9 0a 00 00 00       	mov    $0xa,%ecx         ; 将0xa(换行符)赋值给 ecx
  29:	e8 00 00 00 00       	callq  2e <main+0x2e>    ; 调用函数
  2e:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax   ; 将 rbp 寄存器的第一个字节零扩展到 eax 寄存器中
  32:	83 c0 01             	add    $0x1,%eax         ; 将 eax 加1
  35:	88 45 ff             	mov    %al,-0x1(%rbp)    ; 将 a1 寄存器的值存回 rbp 寄存器的第一个字节
  38:	80 7d ff 7a          	cmpb   $0x7a,-0x1(%rbp)  ; 比较0x7a('z')和 rbp 寄存器的第一个字节
  3c:	7e d5                	jle    13 <main+0x13>    ; 小于等于时，跳转到(main+0x13)
  3e:	b8 00 00 00 00       	mov    $0x0,%eax         ; 将0赋给 eax ，作为返回值
  43:	48 83 c4 30          	add    $0x30,%rsp        ; 恢复栈指针
  47:	5d                   	pop    %rbp              ; 恢复基址指针
  48:	c3                   	retq   
  49:	90                   	nop
  4a:	90                   	nop
  4b:	90                   	nop
  4c:	90                   	nop
  4d:	90                   	nop
  4e:	90                   	nop
  4f:	90                   	nop
